[{"content":"Rendering Pipeline :\n Intro and Philosophy  best visuals and best performance on all targets and platforms supports both forward and deferred rendering      Schematic overview\n CPU on frame 0: does work on physics, networking, animations, etc. then passes on the work to GPU Frame 1: Computes the visibility of every object in the scene. what\u0026rsquo;s seen and what\u0026rsquo;s not seen by camera. this includes culing and types on culling. Frame 2: Rendering starts  Early z pass: depth of objects are scanned BasePass: Drawcalls on all meshes (static and dynamic) + base materials + light maps (static lights and shadows) GBuffer : is a set of all buffers that is maintained by cpu for every frame Dynamic Lighting and shadows: Direct and Indirect lights and shadows. Reflections: Reflection captures, planar reflections, screen space (SS) reflections, ray traced reflections Additional :  Transparency Translucency Atmospheric fog   PostProcessing:  tonemapper Blooom SSAO SSSSS Depth of Field Exposure Blendables Camera Effects     Final Frame: Performance  GPU Profiler Statistics View modes Scalability :  Using CVars for configs on different target platforms and devices. in-depth configs        Advices\n need to watch this again Shadow Rendering Managing tris amd draw calls Translucency Material Cost Forward / Mobile Baking Light Reflections Scalibilty Cvars/Show    ","permalink":"https://siddharthchillale.github.io/projects/unreal_rendering/unreal_rendering/","summary":"Rendering Pipeline :\n Intro and Philosophy  best visuals and best performance on all targets and platforms supports both forward and deferred rendering      Schematic overview\n CPU on frame 0: does work on physics, networking, animations, etc. then passes on the work to GPU Frame 1: Computes the visibility of every object in the scene. what\u0026rsquo;s seen and what\u0026rsquo;s not seen by camera. this includes culing and types on culling.","title":"Rendering Pipeline of Unreal Engine"},{"content":"  git status\n  git log\n --stat : log with the change stats.    git branch : shows all available branches.\n \u0026lt;branch_name\u0026gt; : creates a branch with name as \u0026lt;branch_name\u0026gt;.    git ammend\n --amend -m \u0026ldquo;change the commit message\u0026rdquo; : changes commit message only --amend \u0026lt;nothing\u0026gt; : recommits with interactive editor for changing message.    git checkout\n \u0026lt;branch_name\u0026gt; : switches to \u0026lt;branch_name\u0026gt; \u0026lt;file_name\u0026gt; : removes all recent changes for \u0026lt;file_name\u0026gt; \u0026lt;commit_hash\u0026gt; : pulls the commit with hash \u0026lt;commit_hash\u0026gt; in a \u0026ldquo;DETACHED HEAD\u0026rdquo; state. i.e. We are not on any branch but outside. aNy changes will be discarded in not made permanent. If changes are to made permanent, create a new branch.    git diff\n \u0026lt;commit_hash_1\u0026gt; \u0026lt;commit_hash_2\u0026gt; : compares difference between commits with hashes \u0026lt;commit_hash_1\u0026gt; and \u0026lt;commit_hash_2\u0026gt;.    git cherry-pick \u0026lt;commit_hash\u0026gt;\n applies changes from \u0026lt;commit_hash\u0026gt; to the current branch.    git reset\n --soft \u0026lt;commit_hash\u0026gt; : return to commit with hash \u0026lt;commit_hash\u0026gt; with changes still in staging area. \u0026lt;commit_hash\u0026gt; : return to commit with hash \u0026lt;commit_hash\u0026gt; with changes in working directory and not staged. --hard \u0026lt;commit_hash\u0026gt; : return to commit with hash \u0026lt;commit_hash\u0026gt; with all the modifications deleted. Untracked files are left alone\u0026hellip; for getting rid of untracked files see git clean.    git clean\n -df : removes untracked files(-f) and directories(-d).    git reflog : shows all the log where a commit is referenced.\n  git revert\n \u0026lt;commit_hash\u0026gt; : undos the changes from commit with hash\u0026lt;commit_hash\u0026gt;. keeps git history clean.    git fetch\n \u0026lt;remote_name/branch_name\u0026gt; : brings all changes from the remote repo to the local repo, but doesn\u0026rsquo;t merge with existing files.    git merge\n \u0026lt;remote_name/branch_name\u0026gt; : Merging combines your local changes with changes made by others.    git pull : A convenient shortcut for git fetch and git merge\n \u0026lt;remote_name/branch_name\u0026gt; : fetches all changes from the remote_repo \u0026lt;remote_name\u0026gt; to the local repo and merges the changes.  If any merge conflicts, then do git merge --abort to take the branch to where it was before you pulled.\n  ","permalink":"https://siddharthchillale.github.io/blog/git_mistakes/","summary":"git status\n  git log\n --stat : log with the change stats.    git branch : shows all available branches.\n \u0026lt;branch_name\u0026gt; : creates a branch with name as \u0026lt;branch_name\u0026gt;.    git ammend\n --amend -m \u0026ldquo;change the commit message\u0026rdquo; : changes commit message only --amend \u0026lt;nothing\u0026gt; : recommits with interactive editor for changing message.    git checkout\n \u0026lt;branch_name\u0026gt; : switches to \u0026lt;branch_name\u0026gt; \u0026lt;file_name\u0026gt; : removes all recent changes for \u0026lt;file_name\u0026gt; \u0026lt;commit_hash\u0026gt; : pulls the commit with hash \u0026lt;commit_hash\u0026gt; in a \u0026ldquo;DETACHED HEAD\u0026rdquo; state.","title":"Handle git mistakes"},{"content":"I develop a simple path tracer that can render scenes with global illumination. The first two tasks focus on providing an efficient implementation of ray-scene geometry queries. In the third task (Pathtracer) I developed the ability to simulate light bounces around the scene. Specifically, indirect and direct illumination. The pathtracer renders COLLADA files.\n Task 1. Generating Camera Rays Task 2. Handling ray-triangle and ray-sphere intersections; Task 3: Path tracing  Task 1. Generating Camera Rays Steps:\n By default, rays are generated from the left bottom of a pixel. Sample a random number from 0 to 1 to add to the pixel coordinates. Normalise with respect to the screen coordinates. Subtract 0.5 from both x and y coordinates to center the pixel. Generate ray to this new normalised location with the camera position as the origin of the ray. Calculate the sensor height and sensor width using the vertical field of view of the camera and using trigonometry. Take care to handle units carefully as field of view will be returned in degrees, whereas the trig functions take angles in radians. Scale the normalised screen coordinates with the sensor width and sensor height calculated from step 2. The ray created is generated with respect to the camera space. This ray needs to be converted back to world space by multiplying the ray direction with the camera to world transformation matrix (given in camera). Figure: Rays generated from camera. Figure: Camera with wider aperture for shallow depth of field  Task 2. Handling ray-triangle and ray-sphere intersections Ray-Triangle Intersection: I used the Moller-Trumbore algorithm for Ray-triangle intersection.\nSteps:\n Scotty3D function of ray-triangle intersection returns a Trace structure which contains the information around the point where the ray hit the triangle. This contains the information of the ray that hits that object, if the hit happens and the position where the hit happens. It also modifies the max valid bound of the ray, so that other later hits (such as hits that are behind the object) are ignored. The above figure illustrates equations to calculate the ray-triangle intersection. Solving the equations we get a vector of 3-dimensions. The first two coordinates (u, v) are the barycentric coordinates w.r.t. the triangle (the beta and gamma). The last coordinate (t) is the distance along the ray where the intersection happens. Check if u \u0026gt;0 , v \u0026gt; 0 and 1 - (u+v) \u0026gt; 0 . This checks if the intersection happens inside the triangle. Check if the t value is within the valid range of dist_bounds.min and dist_bounds.max of the ray. If all the above conditions are true, we say the ray as hit the triangle. The position of hit is easily found by putting it in the ray equation. Ray-Sphere intersection Steps: Similar to ray-triangle intersection we have to fill the Trace structure. FRom the figure, we can say that the ray intersects the sphere if the ray satisfies the equation of the sphere. Thus substitute the ray in sphere equation and find solutions two ideal solution t1 and t2. If the solutions are real numbers then we say that a hit has occurred. For this we can check early by checking the signature of the determinant of the equation. One thing to consider is that the equation assumes a unit sphere which is not the case in Scotty3D. Thus, radius needs to be taken into account for solving the equation. If there is a hit, update the max bound of the ray. Find the position where hit has occurred. Fill the trace structure and return it. Results from implementing ray-triangle and ray-sphere intersections are displayed below. Figure: Ray-sphere intersection on Cornell Box (cbox.dae) Ray-triangle intersection on model of Cow (cow.dae)  Task 3. Path tracing Indirect illumination.\nSteps:\n Randomly sample a new ray direction from the BSDF distribution using BSDF::scatter(). Create a new world-space ray. New depth value is the previous depth-1. The bounds of the ray are set to (EPS_F, 2.0f) . We also offset the origin of the ray with direction * EPS_F. This is done to account for numerical precision. Doing so removes a lot of white dots that are visible in the scene otherwise. Call Pathtracer::trace() to get incoming light. We are only interested in the second component of this light which deals with the reflective component. Scale this by the bsdf distribution and the cos_theta. Since the sampling is done over a hemisphere, the pdf is constant at (1/ 2*Pi) Return the calculated radiance at that hit position. Direct illumination: Steps: Repeat the same steps as indirect illumination but with 2 differences. Call trace() to get incoming light. Since we are only interested in the emissive component we take the first component of incoming light. Now the depth value would set to 0 as we are only interested in the emissive component. Scale the radiance with cos_theta and the albedo of the material. Return the radiance calculated at the hit position. My implementation works fine for rendering triangles but has trouble rendering spheres. AS seen in figure, even after 512 samples, spheres are not rendered in the image. Whereas, models with triangle primitives are rendered just fine. Plus, the current code works fine for area lights and point lights. I have included results from using both point lights and area lights  ","permalink":"https://siddharthchillale.github.io/projects/pathtracer/pathtracer/","summary":"I develop a simple path tracer that can render scenes with global illumination. The first two tasks focus on providing an efficient implementation of ray-scene geometry queries. In the third task (Pathtracer) I developed the ability to simulate light bounces around the scene. Specifically, indirect and direct illumination. The pathtracer renders COLLADA files.\n Task 1. Generating Camera Rays Task 2. Handling ray-triangle and ray-sphere intersections; Task 3: Path tracing  Task 1.","title":"PathTracer: Global Illumination"},{"content":"\u0026quot; Corona Dashboard\u0026quot;\n   Description - Shows a dashboard for comparing affected numbers from COVID-19 thoughtout the world.\n   Link - Corona-Dashboard\n   Github Link - SiddharthChillale/dashboard-corona\n  \u0026ldquo;NIPS Papers Analysis\u0026rdquo;\n   Description- Discovering the hottest topics in machine learning by analysing NIPS papers using NLP libraries in python.\n   Github Link - SiddharthChillale/NIPS-papers-analyses\n  \u0026ldquo;Risk and Returns: The Sharpe Ratio\u0026rdquo;\n   Description - Studying Sharpe ratio for understanding Risk and Return for Amazon and Facebook stocks through the Fiscal Year 2016.\n   Kaggle Link - siddalore/sharpe-ratio-study\n  \u0026ldquo;Courier Management system\u0026rdquo;\n   Description - Built a courier managements system web application in Flask and database hosted with SQLite, Handled the Model and View of the app with database implementation.\n   Github Link - SiddharthChillale/courier-management-project\n  \u0026ldquo;Python scraper for Goodreads\u0026rdquo;\n   Description- Scraping Goodreads for titles with images of any given author.\n   Github Link- SiddharthChillale/goodreads-scrapper\n  \u0026ldquo;Command line application - Contact Book\u0026rdquo;\n   Description- A command line appliction for keeping your contact info using Click and sqlite.\n   Github Link - SiddharthChillale/cli-phonebook\n  ","permalink":"https://siddharthchillale.github.io/projects/small_projects/projects/","summary":"\u0026quot; Corona Dashboard\u0026quot;\n   Description - Shows a dashboard for comparing affected numbers from COVID-19 thoughtout the world.\n   Link - Corona-Dashboard\n   Github Link - SiddharthChillale/dashboard-corona\n  \u0026ldquo;NIPS Papers Analysis\u0026rdquo;\n   Description- Discovering the hottest topics in machine learning by analysing NIPS papers using NLP libraries in python.\n   Github Link - SiddharthChillale/NIPS-papers-analyses\n  \u0026ldquo;Risk and Returns: The Sharpe Ratio\u0026rdquo;","title":"Small Projects"},{"content":"Bucket List   C++ Game Programming (Binging):\nThis is because I cannot learn something without having some knowledge of its application. I have to overcome the fear of C++ which I will do thanks to this.\nI\u0026rsquo;m learning it through this tutorial by Chilli Tomato Noodle. Currently, I\u0026rsquo;m just binging through it, consuming it like some Netflix Show, haha.\n  Making a Game using Godot Engine (MAJOR GOALS): Update [July 2020]: Realy proud that I completed this. Finally created a 2D platform Game titled \u0026ldquo;Blocky\u0026rsquo;s Revenge\u0026rdquo; where a blocky dude seeks out to avenge his beloved TV that the roundy dudes destroyed (an oscar-worthy story, believe me). I created the player, enemies and some of the background art. I am very proud of it and so happy that I finally saw this to the end. Anyway, the link for the game is here \u0026ndash;\u0026gt; Blocky\u0026rsquo;s Revenge. It can be played on windows, linux, android and macbook (I didn\u0026rsquo;t test for the linux and mac versions though)\n  Making a Portfolio Website with Blog:\nAlready Created the portfolio. (DevBlog for this project comming soon\u0026hellip;)\n  Get the Gold Badge in Hackerrank for C++ (It\u0026rsquo;s an incentive to learn C++ properly, and pretty proud of it).\n  Reading Goals - ( Hands-On ML with Scikit-Learn and Tensorflow), followed by detailed projects. - (Game Architecture) by Jason Gregory - (Cracking the codiing Interview ) by Gayle McDowell\n   ","permalink":"https://siddharthchillale.github.io/blog/things_i_plan_to_do/","summary":"Bucket List   C++ Game Programming (Binging):\nThis is because I cannot learn something without having some knowledge of its application. I have to overcome the fear of C++ which I will do thanks to this.\nI\u0026rsquo;m learning it through this tutorial by Chilli Tomato Noodle. Currently, I\u0026rsquo;m just binging through it, consuming it like some Netflix Show, haha.\n  Making a Game using Godot Engine (MAJOR GOALS): Update [July 2020]: Realy proud that I completed this.","title":"Things I plan to do in the Future"},{"content":"What to do to gain Experience   Reorient your mindset with how the hiring manager or recruiters view you and not how you present yourself.  How to know what the jobs require\n Job Descriptions Informational interview Linkedin Research  BE REALISTIC Once you know what the requirements are\n Look for major roles and responsibilities. Prepare most IMPRESSIVE stories of your existing experiences. List out things you don\u0026rsquo;t know.  VOLUNTEER   Be ready to work for free\n  Good for networking\n  Professional orgs ( Make it easy for them ).\n  Small Local Business ( They need tech support ).\n  Create your own job ( This is possible ).\n  FREELANCING   You earn stuff\n  Can build your portfolio\n  Fiverr, Linked proFinder, UpWork\n  Start a Blog : Can get opportunities for networking. : Shows that you are up to date with the world.\n  Take additional projects from your current employer  Join communities Shadow other employees   LEARN HOW TO SELL YOURSELF Things to consider\n Networking [ I use Linkedin and online forums/communities (discord | IRC) ] Personal Branding [ I use Blogs and Github ]   Also read \u0026ndash; LinkedIn Tips\n","permalink":"https://siddharthchillale.github.io/blog/what-to-do-to-gain-experience/","summary":"What to do to gain Experience   Reorient your mindset with how the hiring manager or recruiters view you and not how you present yourself.  How to know what the jobs require\n Job Descriptions Informational interview Linkedin Research  BE REALISTIC Once you know what the requirements are\n Look for major roles and responsibilities. Prepare most IMPRESSIVE stories of your existing experiences. List out things you don\u0026rsquo;t know.","title":"How to Gain Experience"},{"content":"LinkedIn Tips Summary :  Market yourself with your elevator pitch Optimise LinkedIn profile components (summary and accomplishments) Describe effectively your work experience and projects Create connections participate in the content Your Aim — Raise visibilty  Important Points   Write a polite and short introduction  Hi ___\u0026lt;insert name here\u0026gt;,\rI am Siddharth, a student pursuing Masters in computer science at University at Buffalo.\rI would love to hear more about your work at ___\u0026lt;insert their jobs here\u0026gt;.\rWould you be able to connect for a quick chat ?\rThank you for your time !\rBest, Siddharth.\r A LinkedIn summary is your elevator pitch about yourself. \u0026ldquo;Example summary\u0026rdquo;  I\u0026rsquo;m a student pursing Masters in Computer Science at University at Buffalo, NY. My latest web app project is a dashboard ruuning data analysis and showcasing affected numbers during the COVID-19 crisis. Apart from my academics, I\u0026rsquo;m working on helping with the COVID research by running models on the gathered data.\nIn my free time, I continue improving my skills by applying my knowledge contesting in Kaggle competitions.\nSkills: Analysing Patterns in Data, Python, SQL/Bigquery.\n  Work Experiences Order of events matters\nShould have atmost 3 bullet points expressing what you\u0026rsquo;ve done.\n  At least 1 chould demonstrate individual contribution.\n  At least 1 should communicate project result (with metrics, findings, etc)\n  Include relevant experience only\n  Get more Connections\n Get 500+ connections Join groups Don\u0026rsquo;t bring your ego in the middle.    Engage with LinkedIn content\n like, share and post stuff Give recommendations and endorse people     Informational Interview Questions for asking a new connection -\n What are some interesting aspects of your job? Any advice for someone looking to enter the field? How relevant was your education in getting this job? What other careers did you consider? How do you approach professional development in this field? What are you doing to keep your skills up-to-date? What do you wish you knew before you entered this field?  Finally, make it a goal to leave a positive impression. Even if your new contact isn’t able to directly help you advance in your job search right now, you never know when they may think of you for a future opportunity.\n","permalink":"https://siddharthchillale.github.io/blog/linkedin_tips/","summary":"LinkedIn Tips Summary :  Market yourself with your elevator pitch Optimise LinkedIn profile components (summary and accomplishments) Describe effectively your work experience and projects Create connections participate in the content Your Aim — Raise visibilty  Important Points   Write a polite and short introduction  Hi ___\u0026lt;insert name here\u0026gt;,\rI am Siddharth, a student pursuing Masters in computer science at University at Buffalo.\rI would love to hear more about your work at ___\u0026lt;insert their jobs here\u0026gt;.","title":"LinkedIn Tips"},{"content":"Version 2.0.1 - Date : April 16, 2020 Final\n The numbers had very extreme values due to inconsistency of data. Since we are focusing only on the trend, we do not require exact numbers. Therefore, a rolling mean of 5 values is implemented to smoothen out the irregularities.  Initial\n Added a graph plotting new cases to existing cases. The Graph is number of New cases per Total number of cases. In order to understand exponential growths for diseases, we must not plot the growth against time (which is not so useful in prediction) ; but with the total existing numbers.1 A fall in the graph indicates lowering of new cases with total cases. i.e. We see that China and Korea are out of the danger of new cases. Italy and Spain are seeing small rates of controling the virus. Axes are plotted on logarithmic scale.   Version 2.0 Date: March 23-27, 2020 Updates\n Added a Death Count Graph. Changed the theme of the dashboard to look more presentable. Added functionality of updating data in every refresh or at intervals of 6 hours.   Version 1.0 Date: March 12-18, 2020  Implemented a Confirmed Cases count graph. Implemented a New cases per day graph. Implemented a Pie chart for comparing proportions. Implemented a Table to give info on daily new cases. Deployed in production mode to Heroku.    How To Tell If We\u0026rsquo;re Beating COVID-19 - minutephysics\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://siddharthchillale.github.io/projects/corona_dashboard/corona/","summary":"Version 2.0.1 - Date : April 16, 2020 Final\n The numbers had very extreme values due to inconsistency of data. Since we are focusing only on the trend, we do not require exact numbers. Therefore, a rolling mean of 5 values is implemented to smoothen out the irregularities.  Initial\n Added a graph plotting new cases to existing cases. The Graph is number of New cases per Total number of cases.","title":"Corona Dashboard devlog"}]